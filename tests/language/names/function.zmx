let global = 10;

const [outerA, outerB, outerC] = [2, 4, 6];
let [outerOptionalC, outerOptionalD] = [55, 77];
let [varsClosure, returnClosure];

func noParams() {
    global += 2;
    assert(global == 12);
}

func mandatoryParamsOnly(innerA, innerB, innerC) {
    assert(outerA == innerA);
    assert(outerB == innerB);
    assert(outerC == innerC);
}

func noProvidedOptionals(mandatoryA, mandatoryB, optionalC=outerC, optionalD=10) {
    assert(mandatoryA == outerA);
    assert(mandatoryB == outerB);
    assert(optionalC == outerC);
    assert(optionalD == 10);
}

func providedOptionals(mandatoryA, mandatoryB, optionalC=outerC, optionalD=10) {
    assert(mandatoryA == outerA);
    assert(mandatoryB == outerB);
    assert(optionalC == outerOptionalC);
    assert(optionalD == outerOptionalD);
}

func multiplyReturnFunc(left, optionalSub=0) {
    func middle(center, optionalAdd=0) {
        func inner(right, finalDiv=1) {
            return ((left * center * right) + optionalAdd - optionalSub) / finalDiv;
        }
        
        return inner;
    }

    return middle;
}

{
    let [i, j] = [11, 22];
    let k = 66;

    func closure(variable=i) {
        k = k - 33;
        assert(j + 11 == k);
        assert(variable == 11);
    }

    varsClosure = closure;
}

{
    let i = 0;

    func closure() {
        i += 1;
        return i;
    }

    returnClosure = closure;
}

noParams();

mandatoryParamsOnly(outerA, outerB, outerC);

noProvidedOptionals(outerA, outerB);
noProvidedOptionals(.mandatoryB=outerB, .mandatoryA=outerA); // Reverse order with kwargs.

providedOptionals(outerA, outerB, outerOptionalC, outerOptionalD);
providedOptionals(outerA, .optionalC=outerOptionalC, .mandatoryB=outerB, .optionalD=outerOptionalD);

varsClosure();

assert(returnClosure() == 1);
assert(returnClosure() == 2);
assert(returnClosure() == 3);

assert(multiplyReturnFunc(2)(3)(5) == 30);
assert(multiplyReturnFunc(2)(.optionalAdd=8, .center=4)(4, 2) == 20);
assert(multiplyReturnFunc(.left=2, .optionalSub=1)(3, 4)(1) == 9);
