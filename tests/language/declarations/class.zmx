const [outerA, outerB, outerC] = [11, 22, 33];

class Empty {}

class NoInit {
    methodA(a, b) {
        assert(a == outerA);
        assert(b == outerB);
        assert(this.a == outerA ** 2);
    }
}

class WithInit {
    init(a, b, c) {
        this.a = a;
        this.b = b;
        this.cSquared = c ** 2;
    }

    methodA() {
        assert(this.a == outerA);
        assert(this.b == outerB);
        assert(this.cSquared == outerC ** 2);
    }
}

let empty = Empty();
empty.a = 10;
assert(empty.a == 10);

let noInit = NoInit();
noInit.a = outerA ** 2;
noInit.methodA(outerA, outerB);

let withInit = WithInit(outerA, outerB, outerC);
withInit.methodA();

// Basic inheritance.
class Superclass {
    getName() {
        return "inherited";
    }
}

class Subclass inherits Superclass {
    getName() {
        return super.getName();
    }
}
assert(Subclass().getName() == "inherited");

// More complicated inheritance where "super" is used to access an overridden method.
class Top {
    getName() {
        return "top";
    }
}

class Middle inherits Top {
    getName() {
        return "middle";
    }

    getSuper() {
        return super.getName();
    }
}

class OverridingBottom inherits Middle {
    getName() {
        return "bottom";
    }

    getMiddleName() {
        return super.getName();
    }

    getSuper() {
        return super.getSuper();
    }
}

class EmptyBottom inherits Middle {}

assert(EmptyBottom().getSuper() == "top");
assert(Middle().getSuper() == "top");
assert(OverridingBottom().getSuper() == "top");
assert(OverridingBottom().getMiddleName() == "middle");
assert(OverridingBottom().getName() == "bottom");
