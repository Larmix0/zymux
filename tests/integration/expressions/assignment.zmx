let a = 10;
a += 3;
assert(a == 13);

a -= 1;
assert(a == 12);

a *= 3;
assert(a == 36);
a *= 1;
assert(a == 36);
a *= 0;
assert(a == 0);
a = 50; // Now at 50.

a /= 2;
assert(a == 25);
a /= 25;
assert(a == 1);
a = 18; // Now to 18.

a %= 5;
assert(a == 3);
a %= 3;
assert(a == 0);
a = 4; // Now at 4.

a **= 3;
assert(a == 64);

a >>= 2;
assert(a == 16);

a += 1;
a <<= 2;
assert(a == 68);

a |= 4;
assert(a == 68); // Overlapping set bits, nothing changed.
a |= 7;
assert(a == 71);

a &= 14;
assert(a == 6);

a ^= 11;
assert(a == 13);

// Divide or modulo by 0 should raise a runtime error.
let errorCaught = false;
try {
    a /= 0;
} catch {
    errorCaught = true;
}
assert(errorCaught);

errorCaught = false;
try {
    a %= 0;
} catch {
    errorCaught = true;
}
assert(errorCaught);

// Long chain of maths on assignment of a low precedence sign.
a = 10;
a += 4 * 7 + 3 ** 2;
assert(a == 47);

// Long chain of maths on assignment of a high precedence sign.
a = 5;
a **= -2 + 3 * 4 / 3;
assert(a == 25);
