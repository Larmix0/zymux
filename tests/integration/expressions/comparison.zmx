// Equal.
assert(10 == 10.0);
assert(!(2 == 20));
assert(!(-3 == 3)); // Negation matters.
assert(!(20 == "20")); // Strongly typed.
assert("equality" == "equality"); // Same strings (ensures interning doesn't break equality).
assert(!("unequal" == "Unequal")); // Capitalization matters.
assert(!("equality" == "equalityNot")); // Doesn't just check with left's length.
assert(!("equalityNot" == "equality")); // Doesn't just check with right's length.

// Not equal.
assert(!(10 != 10.0));
assert(2 != 20);
assert(-3 != 3); // Negation matters.
assert(20 != "20"); // Strongly typed.
assert(!("equality" != "equality")); // Same strings (ensures interning doesn't break equality).
assert("unequal" != "Unequal"); // Capitalization matters.
assert("equality" != "equalityNot"); // Doesn't just check with left's length.
assert("equalityNot" != "equality"); // Doesn't just check with right's length.

// Greater than.
assert(10 > -11 == true);
assert(2 > 1.7 == true);
assert(2 > 4.1 == false);
assert(8 > 5 == true);
assert(1 > 1 == false);

// Greater than or equal to.
assert(10 >= -11 == true);
assert(2 >= 1.8 == true);
assert(2 >= 4.1 == false);
assert(8 >= 5 == true);
assert(1 >= 1 == true);

// Less than.
assert(3 < 30 == true);
assert(3 < 1.9 == false);
assert(-20 < 1 == true);
assert(3 < 3 == false);

// Less than or equal to.
assert(3 <= 30 == true);
assert(3 <= 1.9 == false);
assert(-20 <= 1 == true);
assert(3 <= 3 == true);

// Ensure that invalid types for comparisons error out.
let caughtError = false;
try {
    let a = 10 > "invalid";
} catch {
    caughtError = true;
}
assert(caughtError);
