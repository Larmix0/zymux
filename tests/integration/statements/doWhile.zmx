// Automatically only executes once.
{
    let i = 0;
    do {
        i += 1;
    } while false;

    assert(i == 1);
}

{
    // Normal do-while loop without any breaks, continues, or nested looping.
    let i = 0;
    let [zero, one, two] = [false, false, false];
    do {
        if i == 0 {
            zero = true;
        } else if i == 1 {
            one = true;
        } else if i == 2 {
            two = true;
        } else {
            assert(false, $"Expected loop indices to be 0-2, got {i} instead.");
        }
        i += 1;
    } while i < 3;
    assert(zero);
    assert(one);
    assert(two);
}

{
    // Nested while loops.
    let i = 0;
    let [outerZero, outerOne, outerTwo] = [false, false, false];
    do {
        if i == 0 {
            outerZero = true;
        } else if i == 1 {
            outerOne = true;
        } else if i == 2 {
            outerTwo = true;
        } else {
            assert(false, $"Expected loop indices to be 0-2, got {i} instead.");
        }

        // Inner loop.
        let j= 0;
        let [innerZero, innerOne, innerTwo] = [false, false, false];
        do {
            if j == 0 {
                innerZero = true;
            } else if j == 1 {
                innerOne = true;
            } else if j == 2 {
                innerTwo = true;
            } else {
                assert(false, $"Expected loop indices to be 0-2, got {j} instead.");
            }
            j += 1;
        } while j < 3;
        assert(innerZero);
        assert(innerOne);
        assert(innerTwo);
        i += 1;
    } while i < 3;
    assert(outerZero);
    assert(outerOne);
    assert(outerTwo);
}

{
    // breaks/continues on do-while loops.
    let notContinued = 0;
    let i = 0;
    do {
        i += 1;
        if i == 5 {
            break;
        }

        if i < 2 {
            continue;
        }
        notContinued += 1;
    } while i < 100;
    assert(i == 5);
    assert(notContinued == 3);
}
