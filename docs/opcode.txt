This file is documentation for each one of Zymux's operation codes (opcodes) for the VM.

Basic information:
    InstrSize is an enum that represents the size of the next instruction.
    It could be one byte, 2 bytes (short), and even 4 bytes (integer).
    It's primarily used for reading/emitting numbers for instructions, so that the VM
    wouldn't be limited to 255 to represent numbers after instruction.
    Example: having more than 256 constants in one chunk.

    DataType is an enum that represents all the different data types in Zymux as a language.
    It's used as an enum for certain instructions to pass a number that represents which
    data type is being used.
    Example: Emitting a DataType string enum after an "is" opcode to know what type to check
        at the top of the stack.

----------------------------------------------------------------------------------------------------

Binary math:
    Each one of these opcodes pops a first object from the stack, then a second one.
    After that, applies a math operation where the second popped object is the left operand,
    and the first popped object is the right operand.
    Finally, the result of the operation is pushed to the top of the stack.

    Includes:
        OP_ADD, OP_SUBTRACT, OP_MULTIPLY, OP_DIVIDE, OP_MODULO, OP_EXPONENT

    Example:
        Divide opcode first pops obj1, then obj2. The result of obj2 / obj1 is pushed to the stack.

----------------------------------------------------------------------------------------------------

Unary:
    Pops the top object in the stack, then creates a new object that is the same as the popped one,
    but with the unary operation applied on it.

    Includes:
        OP_MINUS, OP_NOT
    
    Example:
        Minus operation pops an integer object whose value is 7. Then, it creates a new integer with
        a minus sign, which is -7, and that gets pushed to the stack.

----------------------------------------------------------------------------------------------------

Argument size:
    Sets the VM's InstrSize to a specific number of bytes written as bits in the name of the opcode,
    so that the next instruction that reads a number, will read that number of bits.

    Includes:
        OP_ARG_16, OP_ARG_32

    Example:
        Arg 16 right before a jump instruction. That'll let the VM know that the jump
        instruction's number is 16 bits (2 bytes) in size inside the bytecode.

----------------------------------------------------------------------------------------------------

Boolean:
    Pushes a boolean value on the stack, either true or false.

    Includes:
        OP_TRUE, OP_FALSE

----------------------------------------------------------------------------------------------------

Equality:
    Checks if the top 2 objects of the stack are considered equal in Zymux.
    Pops them, then pushes a boolean depending on the results.

    Includes:
        OP_EQ, OP_NOT_EQ

----------------------------------------------------------------------------------------------------

Comparison:
    Pops a first object from the stack, then a second one.
    After that, applies a comparison where the second popped object is the left operand,
    while the first popped object is the right operand.
    Finally, pushes a boolean object that indicates the result of the operation (true or false).

    Includes:
        OP_GREATER, OP_GREATER_EQ, OP_LESS, OP_LESS_EQ

    Example:
        OP_GREATER pops obj1 then obj2. The resulting boolean of obj2 > obj1 is pushed.

----------------------------------------------------------------------------------------------------

========================================== Other opcodes ===========================================

OP_LOAD_CONST:
    Loads an object into the stack from the constant object pool.

    Expects a number index after it in the bytecode which is used to index an object from the 
    constant object pool that is currently being used.
    It loads that object into the top of the stack.

OP_AS:
    Converts the topmost object of the stack to a certain data type.
    That data type is a DataType enum number read after the instruction.

    Example:
        Integer 3 is the top of the stack. Then, OP_AS reads a string data type enum after.
        The topmost object (integer of 3) is popped and a string version of it is pushed ("3").

OP_MAKE_ITER:
    Grabs the topmost object in the stack and wraps it inside a new iterator object.
    If the topmost object is not iterable, then it causes a runtime error.

OP_FINISH_STRING:
    Expects a number of string objects to be on top of the stack that are to be concatenated
    to form a string. Reads a number after the instruction to indicate how many string objects to
    concatenate. The concatenation is done from the deepest/lowest in the stack to
    the top/most recent object being concatenated last.
    This opcode is done on every string, even non-interpolated one string objects.

    Example:
        The stack looks like the following: {"Hi"} | {" middle "} | {"end."}
        We expect the number after OP_FINISH_STRING to be 3 in this case.
        Then, we'll start with an empty string (""). After that, we'll peek 3 deep into the stack
        (which will be "Hi"). Then, combine our current string with the peeked string.
        The current empty string is on the left side, while "Hi" is on the right, making the current
        string "Hi". After that, we peek one less deep (2 items deep) where we see " middle ",
        and concatenate our current string as the left side with that string as the right side.
        This makes the current string "Hi middle ". Then we peek one number less, seeing the string
        "end.". Finally, we combine our current string ("Hi middle ") with that, creating
        the final string "Hi middle end.". While we have it stored, we pop the 3 strings we used
        to concatenate, and push that final string ("Hi middle end.").

OP_NULL:
    Pushes a null object to the stack.

OP_DECLARE_GLOBAL:
    Sets a new key value pair in the globals hash
    table where a string constant that's read is the key, and a popped object from the stack
    is the value to the key.
    Declared variable must not have been declared before within the scope the instruction is
    executed on.

OP_ASSIGN_GLOBAL:
    Sets an existing key value pair in the globals hash table
    where a string constant that's read is the key, and a popped object from the stack
    is the value to the key.
    Assigned variable must've been already declared at some visible scope which is being reassigned.

OP_GET_GLOBAL:
    Reads a string const, which is the name of the variable whose value is to be extracted from
    the VM's globals.

OP_ASSIGN_LOCAL:
    Read an index number (which is that of the variable to be reassigned in the stack),
    and changes its object/value to the object currently at the top of the stack.
    Variable must've already been declared beforehand at some accessible local scope.

    Note on declaring locals: they don't utilize any instructions as we simply load their values
    on the stack and use their indices on the stack as a way to keep track of them.

OP_GET_LOCAL:
    Reads an index number
    (which is the index in the stack of the variable whose value is to be extracted),
    then uses it to index into the stack and push that object to the top again.

OP_JUMP:
    Reads a number, which is how many bytes to increment the IP.

OP_JUMP_BACK:
    Reads a number, which is how many bytes to decrement the IP.

OP_ITER_OR_JUMP:
    Assuming the second to last object in the stack is a local variable, and the topmost is
    an iterator object, it reads a number and calls the iteration function on the iterator at
    the top of the stack. If the iterator returned a signal that it's exhausted, then it jumps
    forward the number that it read, otherwise assigns the local at the second to last stack spot
    without making a jump. 

OP_POP_JUMP_IF_FALSE:
    Increments IP a read number after the instruction if the topmost object on the stack is falsey,
    and always pops that object off the stack regardless of its falsiness.

OP_POP:
    Pops one object from the top of the stack and disposes of it.

OP_POP_AMOUNT:
    Reads a number, which is how many objects to pop off of the top of the stack.

OP_END:
    Ends the currently executing VM.
